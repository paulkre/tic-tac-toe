{"version":3,"sources":["components/game/board/field/field.module.scss","components/app/app.module.scss","components/game/board/board.module.scss","components/game/board/console/console.module.scss","components/game/board/field/cross.svg","components/game/board/field/circle.svg","components/app/gh-link/gh-link.module.scss","components/app/gh-link/github.svg","game/index.ts","game/winning-fields.ts","components/game/board/console/index.tsx","components/game/board/field/index.tsx","components/game/index.tsx","components/game/board/index.tsx","components/players/human-player.ts","components/game/game-repeater.tsx","components/app/pvp/index.tsx","game/ml/network.ts","game/ml/model.ts","components/players/ai-player.ts","components/app/pva/index.tsx","util/shuffle-array.ts","components/app/training/job.ts","components/app/training/index.tsx","components/app/gh-link/index.tsx","components/app/index.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","FieldState","getWinningFields","board","getRowIfEqual","offset","stride","a","b","c","initialBoardState","fields","Array","fill","Empty","turn","invertBoard","state","map","n","runGame","player0","player1","onStateUpdate","handleAgent","getOutcome","boardState","winningFields","winner","id","playerId","symbol","Circle","Cross","play","normalizedState","onOponentPlay","action","Error","outcome","onFinish","Symbol","src","alt","className","styles","mapOutcomeToMessage","crossImgUrl","circleImgUrl","mapOutcomeWinnerToSymbol","Console","React","useState","message","setMessage","useGameOutcome","gameState","useGameState","controller","usePlayerController","agentTimeout","setAgentTimeout","useEffect","GameState","Ready","clearTimeout","timeout","setTimeout","wrapper","mapStateToStyle","cross","circle","Field","humanController","useBoardState","probs","useProbs","inner","cn","visible","prob","toFixed","button","onClick","doAction","Board","draw","i","item","includes","highlighted","key","PlayerControllerCtx","createContext","useContext","ProbsCtx","BoardStateCtx","GameOutcomeCtx","GameStateCtx","Loading","Game","setGameState","setBoardState","setOutcome","Running","swap","Math","random","p0","player","p1","newOutcome","Finished","run","Provider","value","probabilities","useHumanPlayer","setPlayer","setController","_state","Promise","resolve","GameRepeater","children","pauseDuration","gameCount","setGameCount","currentGameId","setCurrentGameId","handleFinish","useCallback","Children","child","isValidElement","cloneElement","Pvp","modelUrl","process","loadNetwork","tf","createNetwork","network","layers","dense","inputShape","units","activation","summary","compile","optimizer","adam","loss","createModel","predict","result","preds","logits","isArray","data","dispose","from","train","input","output","x","length","y","fit","download","save","initialProbs","Pva","human","ai","setProbabilities","then","model","sortedActions","keys","sort","shift","useAiPlayer","shuffleArray","array","j","floor","JobState","Training","setData","batchCount","setBatchCount","job","setJob","mounted","fetch","res","json","getState","Idle","start","Stopped","stop","setState","newState","batch","createTrainingJob","disabled","round","GithubLink","href","target","rel","link","iconUrl","Nav","pages","pathname","useLocation","nav","path","title","to","activeLink","undefined","App","Component","exact","signature","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.427bf098.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"field_wrapper__3o3Lx\",\"prob\":\"field_prob__3P2p1\",\"symbol\":\"field_symbol__2gvGQ\",\"visible\":\"field_visible__2g4ms\",\"cross\":\"field_cross__2N0lE\",\"circle\":\"field_circle__349o7\",\"button\":\"field_button__2apta\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"app_wrapper__337D_\",\"inner\":\"app_inner__3X00H\",\"nav\":\"app_nav__3aflD\",\"activeLink\":\"app_activeLink__3p8fE\",\"signature\":\"app_signature__3JUHD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"board_wrapper__3KKpo\",\"inner\":\"board_inner__2VoOT\",\"draw\":\"board_draw__1Rb3n\",\"item\":\"board_item__ZSKiR\",\"highlighted\":\"board_highlighted__3hlOY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"console_wrapper__2dr62\",\"symbol\":\"console_symbol__3ZSF-\"};","module.exports = __webpack_public_path__ + \"static/media/cross.d4c64c18.svg\";","module.exports = __webpack_public_path__ + \"static/media/circle.0f253cf1.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"gh-link_link___8rbM\"};","module.exports = __webpack_public_path__ + \"static/media/github.5cff78e4.svg\";","import { getWinningFields } from \"./winning-fields\";\n\nexport enum FieldState {\n  Empty = 0,\n  Cross = 1,\n  Circle = -1,\n}\n\nexport interface Outcome {\n  winner: {\n    id: number;\n    fields: number[];\n  } | null;\n}\n\nexport type Game = {\n  state: number[];\n  outcome: Outcome | null;\n};\n\nexport type BoardState = {\n  fields: FieldState[];\n  turn: number;\n};\n\nexport type Player = {\n  play(state: FieldState[], playerId: number): Promise<number>;\n  onOponentPlay?(state: FieldState[]): void;\n  onFinish?(outcome: Outcome, isWinner: boolean): void | Promise<void>;\n};\n\nexport const initialBoardState: BoardState = {\n  fields: new Array(9).fill(FieldState.Empty),\n  turn: 0,\n};\n\nconst invertBoard = (state: number[]) => state.map((n) => -n);\n\nexport async function runGame(\n  player0: Player,\n  player1: Player,\n  onStateUpdate?: (state: BoardState) => void\n): Promise<Outcome> {\n  let boardState: BoardState = initialBoardState;\n\n  async function handleAgent() {\n    const playerId = boardState.turn % 2;\n\n    const symbol = !playerId ? FieldState.Cross : FieldState.Circle;\n    const { play } = !playerId ? player0 : player1;\n\n    const normalizedState = playerId\n      ? invertBoard(boardState.fields)\n      : boardState.fields;\n\n    const { onOponentPlay } = !playerId ? player1 : player0;\n    if (onOponentPlay) onOponentPlay(normalizedState);\n\n    const action = await play(normalizedState, playerId);\n\n    if (boardState.fields[action] !== FieldState.Empty)\n      throw Error(\"Illegal move\");\n\n    boardState = {\n      fields: [...boardState.fields],\n      turn: boardState.turn + 1,\n    };\n    boardState.fields[action] = symbol;\n\n    if (onStateUpdate) onStateUpdate(boardState);\n  }\n\n  async function getOutcome(): Promise<Outcome> {\n    while (boardState.turn < 9) {\n      await handleAgent();\n\n      const winningFields = getWinningFields(boardState.fields);\n      if (winningFields)\n        return {\n          winner: {\n            id: boardState.fields[winningFields[0]],\n            fields: winningFields,\n          },\n        };\n    }\n\n    return { winner: null };\n  }\n\n  const outcome = await getOutcome();\n\n  if (player0.onFinish)\n    await player0.onFinish(\n      outcome,\n      outcome.winner ? outcome.winner.id === 0 : false\n    );\n  if (player1.onFinish)\n    await player1.onFinish(\n      outcome,\n      outcome.winner ? outcome.winner.id === 1 : false\n    );\n\n  return outcome;\n}\n","export function getWinningFields(board: number[]) {\n  const getRowIfEqual = (offset: number, stride: number) => {\n    const a = offset;\n    const b = offset + stride;\n    const c = offset + 2 * stride;\n    return (\n      board[a] !== 0 &&\n      board[a] === board[b] &&\n      board[a] === board[c] && [a, b, c]\n    );\n  };\n\n  return (\n    getRowIfEqual(0, 1) ||\n    getRowIfEqual(3, 1) ||\n    getRowIfEqual(6, 1) ||\n    getRowIfEqual(0, 3) ||\n    getRowIfEqual(1, 3) ||\n    getRowIfEqual(2, 3) ||\n    getRowIfEqual(0, 4) ||\n    getRowIfEqual(2, 2)\n  );\n}\n","import React from \"react\";\n\nimport styles from \"./console.module.scss\";\nimport {\n  useGameOutcome,\n  useGameState,\n  usePlayerController,\n  GameState,\n} from \"../..\";\nimport { Outcome, FieldState } from \"../../../../game\";\n\nimport crossImgUrl from \"../field/cross.svg\";\nimport circleImgUrl from \"../field/circle.svg\";\n\nconst Symbol: React.FC<{ src: string }> = ({ src }) => (\n  <img alt=\"Winning symbol\" src={src} className={styles.symbol} />\n);\n\nfunction mapOutcomeWinnerToSymbol(state: number) {\n  switch (state) {\n    case FieldState.Cross:\n      return <Symbol src={crossImgUrl} />;\n    case FieldState.Circle:\n      return <Symbol src={circleImgUrl} />;\n  }\n}\n\nfunction mapOutcomeToMessage({ winner }: Outcome) {\n  if (winner)\n    return (\n      <>\n        {mapOutcomeWinnerToSymbol(winner.id)}\n        {\"\\u00A0\"}won!\n      </>\n    );\n\n  return \"It's a draw!\";\n}\n\nexport const Console: React.FC = () => {\n  const [message, setMessage] = React.useState<JSX.Element | string | null>(\n    null\n  );\n  const outcome = useGameOutcome();\n  const gameState = useGameState();\n  const controller = usePlayerController();\n\n  const [agentTimeout, setAgentTimeout] = React.useState<NodeJS.Timeout | null>(\n    null\n  );\n\n  React.useEffect(() => {\n    if (gameState !== GameState.Ready) return;\n    setMessage(null);\n  }, [gameState]);\n\n  React.useEffect(() => {\n    if (!outcome) return;\n    setMessage(mapOutcomeToMessage(outcome));\n  }, [outcome]);\n\n  React.useEffect(() => {\n    if (!controller) {\n      if (agentTimeout) {\n        clearTimeout(agentTimeout);\n        setAgentTimeout(null);\n      }\n      setMessage(null);\n      return;\n    }\n\n    if (agentTimeout) return;\n\n    const timeout = setTimeout(() => {\n      setMessage(\"Make your move!\");\n    }, 5000);\n    setAgentTimeout(timeout);\n\n    return () => clearTimeout(timeout);\n  }, [controller, agentTimeout]);\n\n  return <div className={styles.wrapper}>{message}</div>;\n};\n","import React from \"react\";\nimport cn from \"classnames\";\n\nimport { FieldState } from \"../../../../game\";\nimport { usePlayerController, useBoardState, useProbs } from \"../..\";\nimport styles from \"./field.module.scss\";\n\ntype FieldProps = { id: number; state: FieldState };\n\nfunction mapStateToStyle(state: FieldState): string | null {\n  switch (state) {\n    case FieldState.Cross:\n      return styles.cross;\n    case FieldState.Circle:\n      return styles.circle;\n    default:\n      return null;\n  }\n}\n\nconst mapTurnToStyle = (turn: number) =>\n  turn % 2 ? styles.circle : styles.cross;\n\nexport const Field: React.FC<FieldProps> = ({ id, state }) => {\n  const humanController = usePlayerController();\n  const boardState = useBoardState();\n  const probs = useProbs();\n\n  const inner = (\n    <div className={styles.wrapper}>\n      <div\n        className={cn(\n          styles.symbol,\n          state !== FieldState.Empty && styles.visible,\n          mapStateToStyle(state) || mapTurnToStyle(boardState.turn)\n        )}\n      ></div>\n      {probs && <div className={styles.prob}>{probs[id].toFixed(2)}</div>}\n    </div>\n  );\n\n  return humanController && state === 0 ? (\n    <button\n      className={styles.button}\n      onClick={() => {\n        humanController?.doAction(id);\n      }}\n    >\n      {inner}\n    </button>\n  ) : (\n    inner\n  );\n};\n","import React from \"react\";\n\nimport {\n  runGame,\n  initialBoardState,\n  BoardState,\n  Outcome,\n  Player,\n} from \"../../game\";\nimport { Board } from \"./board\";\n\nexport type PlayerController = {\n  id: number;\n  doAction(action: number): void;\n};\n\nexport interface PlayerContainer {\n  player: Player | null;\n  controller?: PlayerController | null;\n  probabilities?: number[];\n}\n\ntype GameProps = {\n  id: number;\n  player0: PlayerContainer;\n  player1: PlayerContainer;\n  onFinish?(id: number, winner: Player | null): void;\n};\n\nexport enum GameState {\n  Loading,\n  Ready,\n  Running,\n  Finished,\n}\n\nconst PlayerControllerCtx = React.createContext<PlayerController | null>(null);\nexport const usePlayerController = () => React.useContext(PlayerControllerCtx);\n\nconst ProbsCtx = React.createContext<number[] | null>(null);\nexport const useProbs = () => React.useContext(ProbsCtx);\n\nconst BoardStateCtx = React.createContext<BoardState>(initialBoardState);\nexport const useBoardState = () => React.useContext(BoardStateCtx);\n\nconst GameOutcomeCtx = React.createContext<Outcome | null>(null);\nexport const useGameOutcome = () => React.useContext(GameOutcomeCtx);\n\nconst GameStateCtx = React.createContext<GameState>(GameState.Loading);\nexport const useGameState = () => React.useContext(GameStateCtx);\n\nexport const Game: React.FC<GameProps> = ({\n  id,\n  player0,\n  player1,\n  onFinish,\n}) => {\n  const [gameState, setGameState] = React.useState<GameState>(\n    GameState.Loading\n  );\n  const [boardState, setBoardState] = React.useState<BoardState>(\n    initialBoardState\n  );\n  const [outcome, setOutcome] = React.useState<Outcome | null>(null);\n\n  React.useEffect(() => {\n    if (gameState !== GameState.Ready) return;\n\n    async function run() {\n      setGameState(GameState.Running);\n      setBoardState(initialBoardState);\n      setOutcome(null);\n\n      const swap = Math.random() < 0.5;\n      const p0 = swap ? player1.player! : player0.player!;\n      const p1 = swap ? player0.player! : player1.player!;\n\n      const newOutcome = await runGame(p0, p1, setBoardState);\n      setOutcome(newOutcome);\n      setGameState(GameState.Finished);\n\n      if (onFinish)\n        onFinish(id, newOutcome.winner && (newOutcome.winner.id ? p1 : p0));\n    }\n\n    run();\n  }, [id, gameState, player0.player, player1.player, onFinish]);\n\n  React.useEffect(() => {\n    if (!player0.player || !player1.player) return;\n    setGameState(GameState.Ready);\n  }, [id, player0.player, player1.player]);\n\n  return (\n    <GameStateCtx.Provider value={gameState}>\n      <BoardStateCtx.Provider value={boardState}>\n        <PlayerControllerCtx.Provider\n          value={player0?.controller || player1?.controller || null}\n        >\n          <ProbsCtx.Provider\n            value={player0?.probabilities || player1?.probabilities || null}\n          >\n            <GameOutcomeCtx.Provider value={outcome}>\n              <Board />\n            </GameOutcomeCtx.Provider>\n          </ProbsCtx.Provider>\n        </PlayerControllerCtx.Provider>\n      </BoardStateCtx.Provider>\n    </GameStateCtx.Provider>\n  );\n};\n","import React from \"react\";\nimport cn from \"classnames\";\n\nimport { Console } from \"./console\";\nimport { useBoardState, useGameOutcome } from \"..\";\nimport styles from \"./board.module.scss\";\nimport { Field } from \"./field\";\n\nexport const createBoardState = () => new Uint8Array(9);\n\nexport const Board: React.FC = () => {\n  const { fields } = useBoardState();\n  const outcome = useGameOutcome();\n\n  return (\n    <div className={styles.wrapper}>\n      <div\n        className={cn(styles.inner, outcome && !outcome.winner && styles.draw)}\n      >\n        {fields.map((n, i) => (\n          <div\n            className={cn(\n              styles.item,\n              outcome &&\n                outcome.winner &&\n                outcome.winner.fields.includes(i) &&\n                styles.highlighted\n            )}\n            key={i}\n          >\n            <Field id={i} state={n} />\n          </div>\n        ))}\n      </div>\n      <Console />\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { Player } from \"../../game\";\nimport { PlayerContainer, PlayerController } from \"../game\";\n\nexport function useHumanPlayer(): PlayerContainer {\n  const [player, setPlayer] = React.useState<Player | null>(null);\n  const [controller, setController] = React.useState<PlayerController | null>(\n    null\n  );\n\n  React.useEffect(() => {\n    setPlayer({\n      play: (_state, id) =>\n        new Promise<number>((resolve) => {\n          setController({\n            id,\n            doAction(action) {\n              setController(null);\n              resolve(action);\n            },\n          });\n        }),\n    });\n  }, []);\n\n  return {\n    controller,\n    player,\n  };\n}\n","import React from \"react\";\n\ntype GameRepeaterProps = {\n  pauseDuration?: number;\n};\n\nexport const GameRepeater: React.FC<GameRepeaterProps> = ({\n  children,\n  pauseDuration,\n}) => {\n  const [gameCount, setGameCount] = React.useState(0);\n  const [currentGameId, setCurrentGameId] = React.useState(0);\n\n  const handleFinish = React.useCallback((id: number) => {\n    setGameCount(id + 1);\n  }, []);\n\n  React.useEffect(() => {\n    if (gameCount === currentGameId) return;\n\n    if (pauseDuration === 0) {\n      setCurrentGameId(gameCount);\n      return;\n    }\n\n    const timeout = setTimeout(\n      () => setCurrentGameId(gameCount),\n      pauseDuration || 1000\n    );\n\n    return () => clearTimeout(timeout);\n  }, [currentGameId, gameCount, pauseDuration]);\n\n  return (\n    <>\n      {React.Children.map(\n        children,\n        (child, i) =>\n          React.isValidElement(child) &&\n          React.cloneElement(child, {\n            id: currentGameId,\n            onFinish: handleFinish,\n            key: i,\n          })\n      )}\n    </>\n  );\n};\n","import React from \"react\";\n\nimport { Game } from \"../../game\";\nimport { useHumanPlayer } from \"../../players/human-player\";\nimport { GameRepeater } from \"../../game/game-repeater\";\n\nexport const Pvp: React.FC = () => {\n  const p0 = useHumanPlayer();\n  const p1 = useHumanPlayer();\n\n  return (\n    <GameRepeater>\n      <Game id={0} player0={p0} player1={p1} />\n    </GameRepeater>\n  );\n};\n","import * as tf from \"@tensorflow/tfjs\";\n\nconst modelUrl = `${process.env.PUBLIC_URL}/static/ml/model.json`;\n\nexport const loadNetwork = () => tf.loadLayersModel(modelUrl);\n\nexport function createNetwork() {\n  const network = tf.sequential({\n    layers: [\n      tf.layers.dense({\n        inputShape: [9],\n        units: 64,\n        activation: \"relu\",\n      }),\n      tf.layers.dense({\n        units: 9,\n      }),\n    ],\n  });\n\n  network.summary();\n  network.compile({ optimizer: tf.train.adam(), loss: \"meanSquaredError\" });\n\n  return network;\n}\n","import * as tf from \"@tensorflow/tfjs\";\n\nimport { FieldState } from \"..\";\nimport { createNetwork, loadNetwork } from \"./network\";\n\nexport type Model = {\n  predict(state: FieldState[]): Promise<number[]>;\n  train(input: number[][], output: number[][]): Promise<any>;\n  download(): Promise<tf.io.SaveResult>;\n};\n\nexport async function createModel(network?: tf.LayersModel): Promise<Model> {\n  if (!network) {\n    try {\n      network = await loadNetwork();\n    } catch (err) {\n      network = createNetwork();\n    }\n  }\n\n  return {\n    async predict(fields) {\n      const result = tf.tidy(() => {\n        const state = tf.tensor2d([fields]);\n        const preds = network!.predict(state);\n        const logits = Array.isArray(preds) ? preds[0] : preds;\n        return tf.sigmoid(logits);\n      });\n\n      const probs = await result.data();\n      result.dispose();\n\n      return Array.from(probs);\n    },\n\n    async train(input, output) {\n      const x = tf.tensor(input, [input.length, 9]);\n      const y = tf.tensor(output, [output.length, 9]);\n\n      await network!.fit(x, y);\n\n      x.dispose();\n      y.dispose();\n    },\n\n    download: () => network!.save(\"downloads://model\"),\n  };\n}\n","import React from \"react\";\n\nimport { PlayerContainer } from \"../game\";\nimport { Player, FieldState } from \"../../game\";\nimport { createModel } from \"../../game/ml/model\";\n\nconst initialProbs: number[] = new Array(9).fill(0);\n\nexport function useAiPlayer(id?: number): PlayerContainer {\n  const [player, setPlayer] = React.useState<Player | null>(null);\n  const [probabilities, setProbabilities] = React.useState(initialProbs);\n\n  React.useEffect(() => {\n    createModel().then((model) => {\n      setPlayer({\n        async play(state) {\n          const probs = await model.predict(state);\n\n          setProbabilities(probs);\n\n          const sortedActions = Array.from(probs.keys()).sort(\n            (a, b) => probs[b] - probs[a]\n          );\n\n          while (sortedActions.length) {\n            const action = sortedActions.shift()!;\n            if (state[action] === FieldState.Empty) return action;\n          }\n\n          throw Error(\"Action prediction failed\");\n        },\n\n        onOponentPlay(state) {\n          model.predict(state).then((probs) => {\n            setProbabilities(probs);\n          });\n        },\n      });\n    });\n  }, []);\n\n  React.useEffect(() => {\n    setProbabilities(initialProbs);\n  }, [id]);\n\n  return {\n    player,\n    probabilities,\n  };\n}\n","import React from \"react\";\n\nimport { Game } from \"../../game\";\nimport { useHumanPlayer } from \"../../players/human-player\";\nimport { useAiPlayer } from \"../../players/ai-player\";\nimport { GameRepeater } from \"../../game/game-repeater\";\n\nexport const Pva: React.FC = () => {\n  const human = useHumanPlayer();\n  const ai = useAiPlayer();\n\n  return (\n    <GameRepeater pauseDuration={2000}>\n      <Game id={0} player0={human} player1={ai} />\n    </GameRepeater>\n  );\n};\n","export function shuffleArray(array: any[]) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\n","import { Dispatch, SetStateAction } from \"react\";\n\nimport { createModel } from \"../../../game/ml/model\";\nimport { createNetwork } from \"../../../game/ml/network\";\nimport { shuffleArray } from \"../../../util/shuffle-array\";\n\nexport const TOTAL_BATCH_COUNT = 512;\n\nexport enum JobState {\n  Idle,\n  Running,\n  Stopped,\n}\n\nexport type TrainingJob = {\n  start(): Promise<void>;\n  stop(): void;\n  getState(): JobState;\n  setState(state: JobState): void;\n};\n\nexport function createTrainingJob(\n  setBatchCount: Dispatch<SetStateAction<number>>,\n  data: number[][][]\n): TrainingJob {\n  let state: JobState = JobState.Idle;\n\n  function setState(newState: JobState) {\n    state = newState;\n  }\n\n  async function start() {\n    state = JobState.Running;\n    setBatchCount(0);\n\n    const model = await createModel(createNetwork());\n\n    for (let i = 0; i < TOTAL_BATCH_COUNT; i++) {\n      const batch = [...data!];\n      shuffleArray(batch);\n\n      const input = batch.map(([state]) => state);\n      const output = batch.map(([, actions]) => actions);\n\n      await model.train(input, output);\n\n      if ((state as JobState) === JobState.Stopped) return;\n      setBatchCount(i + 1);\n    }\n\n    await model.download();\n  }\n\n  return {\n    start,\n\n    stop() {\n      setState(JobState.Stopped);\n    },\n\n    getState: () => state,\n\n    setState,\n  };\n}\n","import React from \"react\";\n\nimport {\n  createTrainingJob,\n  TOTAL_BATCH_COUNT,\n  TrainingJob,\n  JobState,\n} from \"./job\";\n\nexport const Training: React.FC = () => {\n  const [data, setData] = React.useState<number[][][] | null>(null);\n  const [batchCount, setBatchCount] = React.useState(0);\n  const [job, setJob] = React.useState<TrainingJob | null>(null);\n\n  React.useEffect(() => {\n    if (data) return;\n\n    let mounted = true;\n    fetch(`${process.env.PUBLIC_URL}/static/ml/data.json`)\n      .then((res) => res.json())\n      .then((data) => {\n        if (mounted) setData(data);\n      });\n\n    return () => {\n      mounted = false;\n    };\n  }, [data]);\n\n  React.useEffect(() => {\n    if (!job || job.getState() !== JobState.Idle) return;\n    job.start().then(() => {\n      if (job.getState() !== JobState.Stopped) {\n        setJob(null);\n        setBatchCount(0);\n      }\n    });\n    return () => job.stop();\n  }, [job]);\n\n  function trainAndDownload() {\n    if (!data) return;\n    setJob(createTrainingJob(setBatchCount, data));\n  }\n\n  return (\n    <>\n      {!data ? (\n        <p>Downloading training data...</p>\n      ) : (\n        <>\n          <p>\n            Training on labeled dataset:\n            <br />\n            <strong>{data.length}</strong> unique game states\n          </p>\n          <p>\n            <button onClick={trainAndDownload} disabled={!!job}>\n              Train and download model\n            </button>\n          </p>\n          {batchCount > 0 && (\n            <p>\n              Batches learned: {batchCount} / {TOTAL_BATCH_COUNT} (\n              {Math.round((batchCount / TOTAL_BATCH_COUNT) * 100)}%)\n            </p>\n          )}\n          {!!job && job.getState() === JobState.Running && (\n            <p>\n              <button\n                onClick={() => {\n                  job.stop();\n                  setJob(null);\n                  setBatchCount(0);\n                }}\n              >\n                Stop training\n              </button>\n            </p>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n","import React from \"react\";\n\nimport styles from \"./gh-link.module.scss\";\nimport iconUrl from \"./github.svg\";\n\nexport const GithubLink: React.FC = () => (\n  <a\n    href=\"https://github.com/paulkre/tic-tac-toe\"\n    target=\"_blank\"\n    rel=\"noopener noreferrer\"\n    className={styles.link}\n  >\n    <img src={iconUrl} alt=\"GitHub icon\" />\n  </a>\n);\n","import React from \"react\";\nimport { HashRouter, Switch, Route, Link, useLocation } from \"react-router-dom\";\n\nimport styles from \"./app.module.scss\";\nimport { Pvp } from \"./pvp\";\nimport { Pva } from \"./pva\";\nimport { Training } from \"./training\";\nimport { GithubLink } from \"./gh-link\";\n\ntype Page = {\n  path: string;\n  Component: React.FC;\n  title: string;\n};\n\nconst Nav: React.FC<{ pages: Page[] }> = ({ pages }) => {\n  const { pathname } = useLocation();\n\n  return (\n    <nav className={styles.nav}>\n      {pages.map(({ path, title }, i) => (\n        <Link\n          to={path}\n          className={pathname === path ? styles.activeLink : undefined}\n          key={i}\n        >\n          {title}\n        </Link>\n      ))}\n    </nav>\n  );\n};\n\nexport const App: React.FC = () => {\n  const pages: Page[] = [\n    {\n      path: \"/pvp\",\n      Component: Pvp,\n      title: \"Against Yourself\",\n    },\n    {\n      path: \"/pva\",\n      Component: Pva,\n      title: \"Against AI\",\n    },\n    {\n      path: \"/training\",\n      Component: Training,\n      title: \"Training\",\n    },\n  ];\n\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.inner}>\n        <HashRouter>\n          <h1>\n            <Link to=\"/\">tic tac toe</Link>\n          </h1>\n          <Nav pages={pages} />\n          <Switch>\n            <Route path=\"/\" exact>\n              <p>\n                Welcome to my little tic tac toe game. The purpose of this\n                project was to get familiar with the development of machine\n                learning algorithms in tensorflow.js. On this website you can\n                either play against <Link to=\"/pvp\">yourself</Link> or against a\n                very simple machine learning <Link to=\"/pva\">algorithm</Link>.\n                If you want, you can even <Link to=\"/training\">train</Link> your\n                own tensorflow model and download it. The source code is\n                available{\" \"}\n                <a\n                  href=\"https://github.com/paulkre/tic-tac-toe\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  here\n                </a>\n                .\n              </p>\n              <p className={styles.signature}>\n                —\n                <br />\n                Paul Kretschel\n              </p>\n            </Route>\n            {pages.map(({ path, Component, title }, i) => (\n              <Route path={path} key={i}>\n                <h2>{title}</h2>\n                <Component />\n              </Route>\n            ))}\n            <Route>\n              <h2>404</h2>\n              <p>Page not found. :(</p>\n            </Route>\n          </Switch>\n        </HashRouter>\n      </div>\n      <GithubLink />\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport { App } from \"./components/app\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}